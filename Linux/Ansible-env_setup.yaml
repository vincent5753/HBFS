- name: Setup ENV for daily driver
  gather_facts: true
  hosts: dell
  tasks:
  - name: Uninstall packages i do not need (Ubuntu with x86_64 arch)
    when: ansible_facts['distribution'] == 'Ubuntu' and ansible_architecture == "x86_64"
    block:
      - name: Uninstall using apt
        ansible.builtin.apt:
          name:
            - aisleriot
            - gnome-calculator
            - gnome-calendar
            - gnome-clocks
            - gnome-mines
            - gnome-mahjongg
            - gnome-todo
            - gnome-todo-common
            - gnome-user-docs
            - gnome-sudoku
            - gnome-video-effects
            - shotwell-common
            - shotwell
            - simple-scan
            - remmina-common
            - remmina-plugin-rdp
            - remmina-plugin-secret
            - remmina-plugin-vnc
            - remmina
            - transmission-common
            - transmission-gtk
            - rhythmbox*
          state: absent
        become: true

  - name: Install useful packages (Ubuntu with x86_64 arch)
    when: ansible_facts['distribution'] == 'Ubuntu' and ansible_architecture == "x86_64"
    block:
      - name: Install useful packages using apt
        ansible.builtin.apt:
          update_cache: yes
          name:
            - android-tools-adb
            - android-tools-fastboot
            - ansible
            - apt-transport-https
            - build-essential
            - ca-certificates
            - cowsay
            - curl
            - fcitx5
            - ffmpeg
            - gcc-12
            - git
            - glances
            - gnupg
            - golang
            - htop
            - imagemagick
            - keepassxc
            - libgcc-12-dev
            - maven
            - make
            - python3-pip
            - smartmontools
            - tree
            - vagrant
            - vlc
            - vagrant
            - virtualbox
            - wget
          state: present
        become: true

  - name: Create directory for storing files for ansible during the installation
    ansible.builtin.file:
      path: "/home/{{ ansible_env.USER }}/Downloads/ansible"
      state: directory

  - name: Download and install Chrome (x86_64)
    when: ansible_facts['architecture'] == "x86_64"
    block:
      - name: Download Chrome deb from Google
        get_url:
          url="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
          dest="/home/{{ ansible_env.USER }}/Downloads/ansible/Chrome-x86_64.deb"
      - name: Install Chrome deb using apt
        ansible.builtin.apt:
          deb="/home/{{ ansible_env.USER }}/Downloads/ansible/Chrome-x86_64.deb"
        become: true

  - name: Download and install Slack Desktop (x86_64)
    when: ansible_facts['architecture'] == "x86_64"
    block:
      - name: Download Slack deb from Salesforce
        get_url:
          url="https://downloads.slack-edge.com/desktop-releases/linux/x64/4.41.105/slack-desktop-4.41.105-amd64.deb"
          dest="/home/{{ ansible_env.USER }}/Downloads/ansible/Slack-x86_64.deb"
      - name: Install Slack deb using apt
        ansible.builtin.apt:
          deb="/home/{{ ansible_env.USER }}/Downloads/ansible/Slack-x86_64.deb"
        become: true

  - name: Install VMware workstation (x86_64)
    when: ansible_facts['architecture'] == "x86_64"
    block:
      - name: Changing permission of "VMware bundle", adding "+x"
        file: dest=files/VMware-Workstation-Full-17.6.3-24583834.x86_64.bundle mode=a+x
        ignore_errors: true
      - name: Execute the VMware bundle
        script: files/VMware-Workstation-Full-17.6.3-24583834.x86_64.bundle
        become: true
        ignore_errors: true

  - name: Disable and stop snap-related services
    systemd:
      name: "{{ item }}"
      enabled: false
      state: stopped
      masked: yes
    ignore_errors: true
    loop:
      - snapd
      - snapd.socket
      - snapd.seeded
    become: true

  - name: Download and install VSCodium (x86_64)
    when: ansible_facts['architecture'] == "x86_64"
    block:
      - name: Download VSCodium deb from GitHub
        get_url:
          url="https://github.com/VSCodium/vscodium/releases/download/1.98.2.25078/codium_1.98.2.25078_amd64.deb"
          dest="/home/{{ ansible_env.USER }}/Downloads/ansible/VSCodium-x86_64.deb"
      - name: Install VSCodium deb using apt
        ansible.builtin.apt:
          deb="/home/{{ ansible_env.USER }}/Downloads/ansible/VSCodium-x86_64.deb"
        become: true

  - name: Download and install 1Pass (x86_64)
    when: ansible_facts['architecture'] == "x86_64"
    block:
      - name: Download 1Password deb from 1Password
        get_url:
          url="https://downloads.1password.com/linux/debian/amd64/stable/1password-latest.deb"
          dest="/home/{{ ansible_env.USER }}/Downloads/ansible/1password-x86_64.deb"
      - name: Install 1Password deb using apt
        ansible.builtin.apt:
          deb="/home/{{ ansible_env.USER }}/Downloads/ansible/1password-x86_64.deb"
        become: true

  - name: Install 小麥注音輸入法 (x86_64)
    when: ansible_facts['architecture'] == "x86_64"
    block:
      - name: Install 小麥注音輸入法 dependencies using apt
        ansible.builtin.apt:
          name:
            - pkg-config
            - fcitx5
            - libfcitx5core-dev
            - libfcitx5config-dev
            - libfcitx5utils-dev
            - fcitx5-modules-dev
            - cmake
            - extra-cmake-modules
            - gettext
            - libfmt-dev
            - libicu-dev
            - libjson-c-dev
          state: present
        become: true
      - name: Clone fcitx5-mcbopomofo repo from GitHub
        ansible.builtin.git:
          repo: "https://github.com/openvanilla/fcitx5-mcbopomofo.git"
          dest: "/home/{{ ansible_env.USER }}/Downloads/ansible/fcitx5-mcbopomofo"
      - name: Create directory for building fcitx5-mcbopomofo
        ansible.builtin.file:
          path: "/home/{{ ansible_env.USER }}/Downloads/ansible/fcitx5-mcbopomofo/build"
          state: directory
      - name: Configure fcitx5-mcbopomofo with CMake
        ansible.builtin.command:
          cmd: "cmake ../ -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release"
          chdir: "/home/{{ ansible_env.USER }}/Downloads/ansible/fcitx5-mcbopomofo/build"
      - name: Build fcitx5-mcbopomofo with make
        ansible.builtin.command:
          cmd: "make"
          chdir: "/home/{{ ansible_env.USER }}/Downloads/ansible/fcitx5-mcbopomofo/build"
      - name: Install fcitx5-mcbopomofo
        ansible.builtin.command:
          cmd: "make install"
          chdir: "/home/{{ ansible_env.USER }}/Downloads/ansible/fcitx5-mcbopomofo/build"
        become: true 
      - name: Update icon caches
        ansible.builtin.command:
          cmd: "update-icon-caches /usr/share/icons/*"
        become: true

      # - name: Ensure fcitx5 profile directory exists
      #   ansible.builtin.file:
      #     path: "{{ item }}"
      #     state: directory
      #     owner: "{{ ansible_env.USER }}"
      #     group: "{{ ansible_env.USER }}"
      #     mode: '0700'
      #   loop:
      #     - /home/{{ ansible_env.USER }}/.config
      #     - /home/{{ ansible_env.USER }}/.config/fcitx5

      # - name: Write fcitx5 profile
      #   ansible.builtin.copy:
      #     dest: ~/.config/fcitx5/profile
      #     content: |
      #       [Groups/0]
      #       # Group Name
      #       Name: Default
      #       # Layout
      #       Default Layout: us
      #       # Default Input Method
      #       DefaultIM: keyboard-us

      #       [Groups/0/Items/0]
      #       # Name
      #       Name: mcbopomofo
      #       # Layout
      #       Layout:

      #       [Groups/0/Items/1]
      #       # Name
      #       Name: keyboard-us
      #       # Layout
      #       Layout:

      #       [GroupOrder]
      #       0: Default

  - name: Install scrcpy (x86_64)
    when: ansible_facts['architecture'] == "x86_64"
    block:
      - name: Install scrcpy dependencies using apt
        ansible.builtin.apt:
          name:
            - ffmpeg
            - libsdl2-2.0-0
            - adb
            - wget
            - gcc
            - git
            - pkg-config
            - meson
            - ninja-build
            - libsdl2-dev
            - libavcodec-dev
            - libavdevice-dev
            - libavformat-dev
            - libavutil-dev
            - libswresample-dev
            - libusb-1.0-0
            - libusb-1.0-0-dev
          state: present
        become: true
      - name: Clone scrcpy repository
        ansible.builtin.git:
          repo: https://github.com/Genymobile/scrcpy
          dest: /home/{{ ansible_env.USER }}/Downloads/ansible/scrcpy
      - name: Install scrcpy from release
        ansible.builtin.shell:
          cmd: ./install_release.sh
          chdir: /home/{{ ansible_env.USER }}/Downloads/ansible/scrcpy
        become: true

  - name: Install grub-customizer
    when: ansible_facts['architecture'] == "x86_64" and ansible_facts['distribution'] == 'Ubuntu'
    block:
      - name: Adding grub-customizer repo
        become: true
        ansible.builtin.apt_repository:
          repo: ppa:danielrichter2007/grub-customizer
          state: present
      - name: Install grub-customizer using apt
        become: true
        ansible.builtin.apt:
          update_cache: yes
          name: grub-customizer

  - name: Install GCP related packages
    when: ansible_facts['architecture'] == "x86_64" and ansible_facts['distribution'] == 'Ubuntu'
    block:
      - name: Install required packages
        ansible.builtin.apt:
          name:
            - apt-transport-https
            - ca-certificates
            - gnupg
            - curl
          state: present
          update_cache: true
        become: true
      - name: Download Google Cloud public key
        get_url:
          url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          dest: /tmp/google-cloud-key.gpg
      - name: Import Google Cloud public key
        command: gpg --yes --dearmor -o /usr/share/keyrings/cloud.google.gpg /tmp/google-cloud-key.gpg
        become: true
      - name: Add Google Cloud SDK repository
        copy:
          content: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"
          dest: /etc/apt/sources.list.d/google-cloud-sdk.list
        become: true
      - name: Update apt cache and install google-cloud-cli
        apt:
          name: google-cloud-cli
          state: present
          update_cache: true
        become: true
      - name: Install Google Cloud Storage package using pip
        ansible.builtin.pip:
          name: google-cloud-storage
  - name: Setup zsh
    block:
      - name: Install zsh
        ansible.builtin.apt:
          name: zsh
          state: present
        become: true
      - name: Set user shell to zsh
        ansible.builtin.user:
          name: "{{ ansible_env.USER }}"
          shell: /bin/zsh
        become: true
      - name: Install Oh My Zsh
        ansible.builtin.git:
          repo: https://github.com/ohmyzsh/ohmyzsh.git
          dest: ~/.oh-my-zsh
          depth: 1
      - name: Install zsh-autosuggestions plugin
        ansible.builtin.git:
          repo: https://github.com/zsh-users/zsh-autosuggestions
          dest: ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
          depth: 1
      - name: Install zsh-completions plugin
        ansible.builtin.git:
          repo: https://github.com/zsh-users/zsh-completions
          dest: ~/.oh-my-zsh/custom/plugins/zsh-completions
          depth: 1
      - name: Install zsh-syntax-highlighting plugin
        ansible.builtin.git:
          repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
          dest: ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
          depth: 1
  - name: Adding fctix5 on startup
    block:
    - name: Ensure .config and autostart directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0700'
      loop:
        - /home/{{ ansible_env.USER }}/.config
        - /home/{{ ansible_env.USER }}/.config/autostart
    - name: Create fcitx.desktop file
      copy:
        content: |
          [Desktop Entry]
          Type=Application
          Exec=fcitx5 -d
          Hidden=false
          NoDisplay=false
          X-GNOME-Autostart-enabled=true
          Name[en_US]=fcitx5 -d
          Name=fcitx
          Comment[en_US]=
          Comment=
        dest: /home/{{ ansible_env.USER }}/.config/autostart/fcitx.desktop
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0700'
